// <auto-generated />
using System;
using Bank.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bank.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250810133607_FixNamingCase")]
    partial class FixNamingCase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bank.Core.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_number");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("holder_name");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Bank.Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("RecipientAccountNumber")
                        .HasColumnType("text")
                        .HasColumnName("recipient_account_number");

                    b.Property<string>("SenderAccountNumber")
                        .HasColumnType("text")
                        .HasColumnName("sender_account_number");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_transactions_type_id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("Bank.Core.Lookups.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_transaction_types");

                    b.ToTable("transaction_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Deposit"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Withdrawal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Transfer"
                        });
                });

            modelBuilder.Entity("Bank.Core.Entities.Transaction", b =>
                {
                    b.HasOne("Bank.Core.Lookups.TransactionType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_transaction_types_type_id");

                    b.Navigation("Type");
                });
#pragma warning restore 612, 618
        }
    }
}
